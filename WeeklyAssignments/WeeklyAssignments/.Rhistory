y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
summary_data <- prob_data_mod %>%
group_by(SubID, CONDITION, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
# Step 2: Create the plot
ggplot(summary_data, aes(x = CONDITION, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
# Step 2: Create the plot
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
geom_point(position = position_dodge(width = 0.3)) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency"
) +
ggtitle("Proportion Correct by Condition, Subject, and Numerator Congruency") +
theme_minimal()
# Step 2: Create the plot
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = CONDITION, y = proportion_correct, color = as.factor(num_congruent))) +
geom_jitter(width = 0.2, height = 0, alpha = 0.6) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency (TRUE/FALSE)"
) +
ggtitle("Proportion Correct by Condition for Each Subject and Numerator Congruency Level") +
theme_minimal()
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = as.factor(num_congruent))) +
geom_jitter(width = 0.2, height = 0, alpha = 0.6) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency (TRUE/FALSE)"
) +
ggtitle("Proportion Correct by Condition for Each Subject and Numerator Congruency Level") +
theme_minimal()
# Step 2: Create the plot
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = subject, y = proportion_correct, color = factor(num_congruent))) +
geom_point() +
facet_wrap(~ condition) +
scale_color_discrete(name = "Numerator\nCongruent") +
labs(
title = "Proportion Correct by Subject, Condition, and Numerator Congruency",
x = "Subject",
y = "Proportion Correct"
) +
theme_classic() +
theme(legend.position = "bottom")
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = SubID, y = proportion_correct, color = factor(num_congruent))) +
geom_point() +
facet_wrap(~ condition) +
scale_color_discrete(name = "Numerator\nCongruent") +
labs(
title = "Proportion Correct by Subject, Condition, and Numerator Congruency",
x = "Subject",
y = "Proportion Correct"
) +
theme_classic() +
theme(legend.position = "bottom")
# Step 2: Create the plot
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
prob_data_mod <- data %>%
# a. Separate `left_stim` into `left_numerator` and `left_other`
separate(left_stim, into = c("left_numerator", "left_other"), sep = "_", convert = TRUE) %>%
# b. Separate `right_stim` into `right_numerator` and `right_other`
separate(right_stim, into = c("right_numerator", "right_other"), sep = "_", convert = TRUE) %>%
# c. Calculate `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other)
) %>%
# d. Create `larger_numerator` column
mutate(
larger_numerator = if_else(left_numerator > right_numerator, "left", "right")
) %>%
# e. Create `larger_proportion` column
mutate(
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right")
) %>%
# f. Create `num_congruent` column
mutate(
num_congruent = (larger_numerator == larger_proportion)
)
print(prob_data_mod)
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = as.factor(SubID), y = proportion_correct, color = factor(num_congruent))) +
geom_point() +
facet_wrap(~ condition) +
scale_x_discrete(breaks = unique(summary_data$subject)) +
scale_color_discrete(name = "Numerator\nCongruent") +
labs(
title = "Proportion Correct by Subject, Condition, and Numerator Congruency",
x = "Subject",
y = "Proportion Correct"
) +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom"
)
# Step 2: Create the plot
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = SubID, y = proportion_correct, color = factor(num_congruent))) +
geom_point() +
facet_wrap(~ condition) +
scale_x_discrete() +
scale_color_discrete(name = "Numerator\nCongruent") +
labs(
title = "Proportion Correct by Subject, Condition, and Numerator Congruency",
x = "Subject",
y = "Proportion Correct"
) +
theme_classic() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "bottom"
)
# Step 2: Create the plot
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = factor(SubID), y = proportion_correct, color = factor(num_congruent))) +
geom_point() +
facet_wrap(~ condition, nrow = 2) +
scale_color_discrete(name = "Numerator\nCongruent") +
labs(
title = "Proportion Correct by Subject, Condition, and Numerator Congruency",
x = "Subject",
y = "Proportion Correct"
) +
theme_classic() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
legend.position = "bottom"
)
# Step 2: Create the plot
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
prob_data_mod <- data %>%
# a. Separate `left_stim` into `left_numerator` and `left_other`
separate(left_stim, into = c("left_numerator", "left_other"), sep = "_", convert = TRUE) %>%
# b. Separate `right_stim` into `right_numerator` and `right_other`
separate(right_stim, into = c("right_numerator", "right_other"), sep = "_", convert = TRUE) %>%
# c. Calculate `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other)
) %>%
# d. Create `larger_numerator` column
mutate(
larger_numerator = if_else(left_numerator > right_numerator, "left", "right")
) %>%
# e. Create `larger_proportion` column
mutate(
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right")
) %>%
# f. Create `num_congruent` column
mutate(
num_congruent = (larger_numerator == larger_proportion)
)
unique_values <- unique(prob_data_mod$SubID)
print(unique_values)
print(prob_data_mod)
summarized_data <- prob_data %>%
group_by(SubID, condition) %>%
summarise(prop_corr = mean(correct), .groups = "drop")
# Calculate mean and standard error of proportion correct for each condition
plot_data <- summarized_data %>%
group_by(condition) %>%
summarise(
mean_prop_corr = mean(prop_corr),
se_prop_corr = sd(prop_corr) / sqrt(n())
)
# Create a plot with error bars to represent standard error
ggplot(plot_data, aes(x = condition, y = mean_prop_corr)) +
geom_point(color = "blue", size = 3) +
geom_errorbar(aes(ymin = mean_prop_corr - se_prop_corr, ymax = mean_prop_corr + se_prop_corr),
width = 0.2, color = "blue") +
labs(x = "Condition", y = "Mean Proportion Correct", title = "Proportion Correct by Condition") +
theme_minimal()
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
# Step 2: Create the plot
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
summary(cars)
plot(pressure)
- How do people think proportionally with different kinds of stimuli?
plot(pressure)
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
prob_data_mod <- data %>%
# a. Separate `left_stim` into `left_numerator` and `left_other`
separate(left_stim, into = c("left_numerator", "left_other"), sep = "_", convert = TRUE) %>%
# b. Separate `right_stim` into `right_numerator` and `right_other`
separate(right_stim, into = c("right_numerator", "right_other"), sep = "_", convert = TRUE) %>%
# c. Calculate `left_proportion_value` and `right_proportion_value`
mutate(
left_proportion_value = left_numerator / (left_numerator + left_other),
right_proportion_value = right_numerator / (right_numerator + right_other)
) %>%
# d. Create `larger_numerator` column
mutate(
larger_numerator = if_else(left_numerator > right_numerator, "left", "right")
) %>%
# e. Create `larger_proportion` column
mutate(
larger_proportion = if_else(left_proportion_value > right_proportion_value, "left", "right")
) %>%
# f. Create `num_congruent` column
mutate(
num_congruent = (larger_numerator == larger_proportion)
)
print(prob_data_mod)
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
summary_data <- prob_data_mod %>%
group_by(SubID, condition, num_congruent) %>%
summarize(proportion_correct = mean(correct, na.rm = TRUE)) %>%
ungroup()
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
ggplot(summary_data, aes(x = condition, y = proportion_correct, color = num_congruent)) +
stat_halfeye(aes(fill = num_congruent), adjust = 0.5, width = 0.6, justification = -0.1) +
labs(
x = "Condition",
y = "Proportion Correct",
color = "Numerator Congruency",
fill = "Numerator Congruency"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
) +
ggtitle("Proportion Correct by Condition and Numerator Congruency")
install.packages("papaja")
install_tinytex()
tinytex::install_tinytex()
install.packages('xfun')
install.packages("xfun")
install.packages("xfun")
